/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  dev
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         Euler;
}

gradSchemes
{
    default         Gauss linear;
    "grad\((weight|abscissae|velocityAbscissa).*\)" faceLimited leastSquares 1.0;
}

divSchemes
{
    default                             none;

    "div\(velocityAbscissae.*\)"        Gauss linear;
    "div\(interpolate\(velocityAbscissae.*\),velocityAbscissae.*\)" Gauss linear;
    "div\(alphaPhi.*,thermo:rho.*\)" bounded Gauss limitedLinear 1;
    "div\(alphaRhoPhi.*,U.*\)"      bounded Gauss limitedLinearV 1;
    "div\(phi.*,U.*\)"              bounded Gauss limitedLinearV 1;
    div(phiRhoPhi.water,e.water)        bounded Gauss limitedLinear 1;
    div(phiRhoPhi.water,K)              bounded Gauss limitedLinear 1;
    div(devRhoReff.water)               Gauss linear;
    div((phi.water|interpolate(thermo:rho.water)),U.water) Gauss linear;
    div((((alpha.water*thermo:rho.water)*nuEff.water)*dev2(T(grad(U.water))))) Gauss linear;
    div((((alpha.air*thermo:rho.air)*nuEff.air)*dev2(T(grad(U.air))))) Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear corrected;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         corrected;
}

wallDist
{
    method          meshWave;
}


// ************************************************************************* //
